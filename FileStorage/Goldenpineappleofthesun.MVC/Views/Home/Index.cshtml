@model IEnumerable<Goldenpineappleofthesun.Database.Models.DocumentItem>

@{
    ViewBag.Title = "Home Page";
    var docs = Model;
}

<link rel="stylesheet" href="../files/fonts.css">
<style>
    html {
        font-family: montserrat;
        font-size: 14px;
    }
    body {
        background: #388a43;
    }
    .jumbotron {    
        margin-top: 30px;
        background: #e2e6c1; 
    }
    .a-button,
    .a-small-button {
        box-sizing: border-box;
        border: 1px solid #928d8d;
        border-bottom: 3px solid #928d8d;
        border-radius: 5px;
        text-align: center;
    }
    .a-button:hover,
    .a-small-button:hover {
        border-bottom-width: 4px;
        transform: translateY(-2px);
    }
    .a-button:active,
    .a-small-button:active {
        border-bottom-width: 1px;
        transform: translateY(1px);
    }
    .a-button {
        height: 40px;
        font-size: 0.9rem;
        line-height: 28px;
    }
    .a-small-button {
        height: 30px;
        line-height: 27px;
        font-family: cormorantgaramond;
        font-size: 0.9rem;
        font-style: italic;
        font-weight: bold;
        color: #333333;
    }
    .a-button:hover {
       height: 42px;
       margin-bottom: -2px;
    }
    .a-small-button:hover {
        height: 32px;
    }
    .a-button:active {
        height: 39px;
    }
    .a-small-button:active {
        height: 29px;
    }
    .document-header {    
        border-bottom: 1px solid #cacaca;
        height: 30px;
        margin: 10px 0 20px;
    }
    .document-sort {
        font-size: 0.8rem;
        color: #808080a6;
        border: 1px solid #808080a6;
        border-radius: 5px;
        width: 24px;
        height: 20px;
        line-height: 15px;
        text-align: center;
        cursor: default;
        transition: background-color 0.2s ease-out;
    }
    .document-sort:hover {
        color: #000;
        border: 1px solid #000;
    }
    .document-sort.active {
        color: #000000;
        background: #ffffff;
        border: 1px solid #808080;
    }
    .document-search {
        position: absolute;
        right: 12px;
        top: -5px;
        width: 75px;
        height: 25px;
        margin: 0;
        padding-right: 15px;
        font-size: 1rem;
        text-align: right;    
        border-radius: 3px;
        border: none;
        transition: width 0.2s ease-out;
    }
    .document-search:focus {
        width: 100%;
    }
    .document {    
        border-bottom: 1px solid #cacaca;
        height: 50px;
    }
    .document-name {
        display: inline-block;
        font-size: 1.1rem;
    }
    .document-author {
        display: inline-block;    
        height: 20px;
        line-height: 20px;
        font-size: 0.8rem;
    }
    .document-author:before {
        content: 'автор: ';
        font-size: 10px;
    }
    .document-date {
        display: inline-block;
        height: 20px;
        line-height: 20px;
        font-size: 0.8rem;
    }
    .document-date:before {
        content: 'создан: ';
        font-size: 10px;
    }
    .document-link {
        height: 50px;
        color: #333333;
        font-size: 0.8rem;
        line-height: 50px;
        font-style: italic;
        cursor: default;
    }
    .document-link-button {
        position: relative;
        width: 100%;
        top: 10px;
    }
    .document-link-button:hover {
        color: #0064ff;    
        border-color: #0064ff;
    }
    .document-del {
        height: 50px;
        color: #333333;
        font-size: 0.8rem;
        line-height: 50px;
        font-style: italic;
        cursor: default;
    }
    .document-del-button {
        position: relative;
        width: 100%;
        top: 10px;
    }
    .document-del-button:hover {
        color: red;   
        border-color: red;
    }
    .upload-button {    
        margin: 0px 0 16px 0;
        padding: 4px 12px;
        border: 1px solid #928d8d;
        border-bottom: 3px solid #928d8d;
        border-radius: 5px;
        background: none;
        user-select: none;
    }
    .upload-button:hover {
        color: #000000;
        border-color: #000000;
        margin-bottom: 14px; /* upload-button.hover - утолщение нижней границы */
    }
    .upload-button:active {
        color: #000000;
        border-color: #000000;
        margin-bottom: 17px; /* upload-button.hover - утолщение нижней границы */
    }
    .document-missed {
        line-height: 50px;
        width: 100%;
        text-align: center;
        color: #ce6262;
        font-size: 0.8rem;
    }
</style>

<div class="jumbotron">
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Upload", "File", FormMethod.Post, new { enctype = "multipart/form-data", @class = "upload-form"}))
            {
                <input type="button" onclick="$('#load-file')[0].click()" value="Загрузить новый файл" class="upload-button a-button"/>
                <input id="load-file" type="file" name="upload" style="display:none"/>
                <input id="submit-file" type="submit" value="Загрузить" style="display:none"/>
            }

            @Html.EditorFor(m => docs, "DocumentHeader")
            <div id="document-list">
                @foreach (var item in docs)
                {
                        @Html.EditorFor(m => item, "Document");
                }
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")

<script>
    // нажатие на кнопку "Загрузить файл"
    $('#load-file').on('change', function (event) {
        var file = this.files[0];
        var reader = new FileReader();

        reader.readAsDataURL(file);

        // как только фото загружено
        reader.onload = function (event) {
            $('#submit-file').click();
        }
    })

    // удалить файл
    function deleteDocument(element, login, name) {
        if (!confirm("Вы точно хотите удалить этот файл?"))
            return;

        $(element).remove();
        $.ajax({
            url: "@(Url.Action("Delete", "File"))",
            method: "POST",
            data: {
                login: login,
                name: name
            }
        })
    }

    // открыть файл
    function openFile(path, id) {
        $.ajax({
            url: "@(Url.Action("Open", "File"))",
            method: "POST",
            data: {
                path: path,
                id: id
            }
        })
    }
</script>

<script>
    var listOptions = {
        sortName: false,
        sortAuthor: false,
        sortDate: true,
        search: '',
        timer: 0
    }

    // search timer
    setInterval(function () {
        if (listOptions.timer > 0)
            listOptions.timer--;
        if (listOptions.timer === 1)
            filterDosuments();
    }, 100)

    /* #Обработчики */

    $('.document-search').on('keyup change', function (event) {
        listOptions.search = event.target.value.toLowerCase();
        listOptions.timer = 5;
    })

    /* # Сортировка и поиск */

    // вкл/выкл сортировку
    function sortNameCheck() {
        listOptions.sortName = !listOptions.sortName;
        updateDocumentList()
        sortDocuments()
    }

    // вкл/выкл сортировку
    function sortAuthorCheck() {
        listOptions.sortAuthor = !listOptions.sortAuthor;
        updateDocumentList()
        sortDocuments()
    }

    // вкл/выкл сортировку
    function sortDateCheck() {
        listOptions.sortDate = !listOptions.sortDate;
        updateDocumentList()
        sortDocuments()
    }

    // сортировать
    function sortDocuments() {
        var list = quickSort($('.document').toArray(), createDocumentComparator(listOptions));
        updateDocumentList(list)
    }

    // фильтровать (поиск)
    function filterDosuments(filter) {
        var filter = filter || listOptions.search;
        var list = $('.document').toArray();

        console.log(filter)

        // display none если не отфильтровано
        // display block если отфильтровано
        for (var i=0; i<list.length; i++){
            var name = $(list[i]).find('.document-name');

            if (name && (name.html().toLowerCase().indexOf(filter) !== -1 || !filter))
                $(list[i]).css('display', 'block');
            else
                $(list[i]).css('display', 'none');
        }
    }

    // обновить классы
    // обновить список
    function updateDocumentList(list) {
        if (listOptions.sortName)
            $('#document-sort-name').addClass('active')
        else
            $('#document-sort-name').removeClass('active')

        if (listOptions.sortAuthor)
            $('#document-sort-author').addClass('active')
        else
            $('#document-sort-author').removeClass('active')

        if (listOptions.sortDate)
            $('#document-sort-date').addClass('active')
        else
            $('#document-sort-date').removeClass('active')

        if (list) {
            var doclist = document.createElement("div");
            $(doclist).append(list);
            $('#document-list').html('')
            $('#document-list').append(list);
        }

    }

    /* #Quick sort */

    // быстрая сортировка 
    function quickSort(list, comparer, left, right) {

        var pivot = list.length / 2 ^ 0;

        if (list.length < 2)
            return list;

        var index;
        if (list.length > 1) {
            left = typeof left != "number" ? 0 : left;
            right = typeof right != "number" ? list.length - 1 : right;
            comparer = typeof comparer != "function" ? function (x,y) {return (x > y ? 1 : (x < y ? -1 : 0))} : comparer;

            index = _qs_partition(list, comparer, left, right);
            if (left < index - 1) {
                quickSort(list, comparer, left, index - 1);
            }
            if (index < right) {
                quickSort(list, comparer, index, right);
            }
        }

        return list;
    }

    function _qs_partition(items, comparer, left, right) {
        var pivot = items[Math.floor((right + left) / 2)],
            i = left,
            j = right;

        while (i <= j) {
            while (comparer(items[i], pivot) === -1) {
                i++;
            }
            while (comparer(items[j], pivot) === 1) {
                j--;
            }
            if (i <= j) {
                _qs_swap(items, i, j);
                i++;
                j--;
            }
        }
        return i;
    }

    function _qs_swap(items, firstIndex, secondIndex) {
        const temp = items[firstIndex];
        items[firstIndex] = items[secondIndex];
        items[secondIndex] = temp;
    }

    /* #Функции-компараторы */

    // функция, возвращающая функцию-компаратор(с определенным options)
    function createDocumentComparator(options) {
        return function(d1, d2){
            return compareDocuments(d1, d2, options);
        }
    }

    // функция, которая сравнивает два div.document элемента
    // у них должны быть дети с классами: document-author, document-name, document-date
    // настройк сортировки (на данный момент) берутся из глобального объекта listOptions
    function compareDocuments(d1, d2, options) {
        var doc1 = [];
        var doc2 = [];

        // настраиваем поиск
        // по автору
        if (options.sortAuthor) {
            doc1.push($(d1).find('.document-author').html())
            doc2.push($(d2).find('.document-author').html())
        }
        // по полной дате (только если нет сортировки по назв)
        if (options.sortDate && !options.sortName) {
            doc1.push($(d1).find('.document-date').attr('data-date'))
            doc2.push($(d2).find('.document-date').attr('data-date'))
        }
        // по дню даты (если есть сортировка по назв)
        if (options.sortDate && options.sortName) {
            doc1.push($(d1).find('.document-date').attr('data-day'))
            doc2.push($(d2).find('.document-date').attr('data-day'))
        }
        // по названию (проверяется всегда, всегда в конце)
        if (options.sortName || !options.sortName) {
            doc1.push($(d1).find('.document-name').html())
            doc2.push($(d2).find('.document-name').html())
        }

        return compareObjects(doc1, doc2);
    }

    // сравнивает два документа,
    // представленных в виде массива сравниваемых атрибутов (строк, чисел, дат)
    // не рекурсивно
    function compareObjects(doc1, doc2) {
        for (var i = 0; i < doc1.length; i++) {
            // нормализуем строки
            if (typeof doc1 == 'string')
                doc1 = doc1.toLowerCase();
            if (typeof doc2 == 'string')
                doc2 = doc2.toLowerCase();

            // сравниваем
            if (doc2[i] === undefined)
                return 0;
            if (doc1[i] > doc2[i])
                return 1;
            if (doc1[i] < doc2[i])
                return -1;
        }
        return 0;
    }
</script>
